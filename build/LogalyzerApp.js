/* src/LogalyzerApp.html generated by Svelte v1.41.0 */
var LogalyzerApp = (function(QueryEditor, Nymph, LogEntry) { "use strict";
	QueryEditor = (QueryEditor && QueryEditor.__esModule) ? QueryEditor["default"] : QueryEditor;
	Nymph = (Nymph && Nymph.__esModule) ? Nymph["default"] : Nymph;
	LogEntry = (LogEntry && LogEntry.__esModule) ? LogEntry["default"] : LogEntry;

	function query(options, selectors) {
		return [options, ...selectors];
	}

	function data() {
  return {
    __supportedClasses: [
      LogEntry
    ],
    options: {
      'class': LogEntry.class
    },
    selectors: [{
      'type': '|',
      'strict': [
        ['resource', '/stream'],
        ['resource', '/stream2']
      ]
    }]
  }
};

	var methods = {
  runQuery () {
    const query = this.get('query');
    console.log("Running query: ", query);
    Nymph.getEntities(...query).then((entries) => {
      console.log("Query results: ", entries);
    }, (err) => {
      alert("Error: "+err);
    });
  }
};

	function create_main_fragment(state, component) {
		var div, queryeditor_updating = {}, text, hr, text_1, button;

		var queryeditor_initial_data = {};
		if ('options' in state) {
			queryeditor_initial_data.options = state.options ;
			queryeditor_updating.options = true;
		}
		if ('selectors' in state) {
			queryeditor_initial_data.selectors = state.selectors ;
			queryeditor_updating.selectors = true;
		}
		if ('__supportedClasses' in state) {
			queryeditor_initial_data.supportedClasses = state.__supportedClasses;
			queryeditor_updating.supportedClasses = true;
		}
		var queryeditor = new QueryEditor({
			_root: component._root,
			data: queryeditor_initial_data,
			_bind: function(changed, childState) {
				var state = component.get(), newState = {};
				if (!queryeditor_updating.options && changed.options) {
					newState.options = childState.options;
				}

				if (!queryeditor_updating.selectors && changed.selectors) {
					newState.selectors = childState.selectors;
				}

				if (!queryeditor_updating.supportedClasses && changed.supportedClasses) {
					newState.__supportedClasses = childState.supportedClasses;
				}
				queryeditor_updating = assign({}, changed);
				component._set(newState);
				queryeditor_updating = {};
			}
		});

		component._root._beforecreate.push(function () {
			var state = component.get(), childState = queryeditor.get(), newState = {};
			if (!childState) return;
			if (!queryeditor_updating.options) {
				newState.options = childState.options;
			}

			if (!queryeditor_updating.selectors) {
				newState.selectors = childState.selectors;
			}

			if (!queryeditor_updating.supportedClasses) {
				newState.__supportedClasses = childState.supportedClasses;
			}
			queryeditor_updating = { options: true, selectors: true, supportedClasses: true };
			component._set(newState);
			queryeditor_updating = {};
		});

		var queryeditor_context = {
			state: state
		};

		function click_handler(event) {
			component.runQuery();
		}

		return {
			c: function create() {
				div = createElement("div");
				queryeditor._fragment.c();
				text = createText("\n  ");
				hr = createElement("hr");
				text_1 = createText("\n  ");
				button = createElement("button");
				button.textContent = "Run Query";
				this.h();
			},

			h: function hydrate() {
				addListener(button, "click", click_handler);
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				queryeditor._mount(div, null);
				appendNode(text, div);
				appendNode(hr, div);
				appendNode(text_1, div);
				appendNode(button, div);
			},

			p: function update(changed, state) {
				var queryeditor_changes = {};
				if (!queryeditor_updating.options && changed.options) {
					queryeditor_changes.options = state.options ;
					queryeditor_updating.options = true;
				}
				if (!queryeditor_updating.selectors && changed.selectors) {
					queryeditor_changes.selectors = state.selectors ;
					queryeditor_updating.selectors = true;
				}
				if (!queryeditor_updating.supportedClasses && changed.__supportedClasses) {
					queryeditor_changes.supportedClasses = state.__supportedClasses;
					queryeditor_updating.supportedClasses = true;
				}
				queryeditor._set( queryeditor_changes );
				queryeditor_updating = {};

				queryeditor_context.state = state;
			},

			u: function unmount() {
				detachNode(div);
			},

			d: function destroy() {
				queryeditor.destroy(false);
				removeListener(button, "click", click_handler);
			}
		};
	}

	function LogalyzerApp(options) {
		init(this, options);
		this._state = assign(data(), options.data);
		this._recompute({ options: 1, selectors: 1 }, this._state);

		if (!options._root) {
			this._oncreate = [];
			this._beforecreate = [];
			this._aftercreate = [];
		}

		this._fragment = create_main_fragment(this._state, this);

		if (options.target) {
			this._fragment.c();
			this._fragment.m(options.target, options.anchor || null);

			this._lock = true;
			callAll(this._beforecreate);
			callAll(this._oncreate);
			callAll(this._aftercreate);
			this._lock = false;
		}
	}

	assign(LogalyzerApp.prototype, methods, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount
	 });

	LogalyzerApp.prototype._recompute = function _recompute(changed, state) {
		if (changed.options || changed.selectors) {
			if (differs(state.query, (state.query = query(state.options, state.selectors)))) changed.query = true;
		}
	}

	function assign(target) {
		var k,
			source,
			i = 1,
			len = arguments.length;
		for (; i < len; i++) {
			source = arguments[i];
			for (k in source) target[k] = source[k];
		}

		return target;
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function init(component, options) {
		component.options = options;

		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._root = options._root || component;
		component._yield = options._yield;
		component._bind = options._bind;
	}

	function callAll(fns) {
		while (fns && fns.length) fns.pop()();
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this._root._lock) return;
		this._root._lock = true;
		callAll(this._root._beforecreate);
		callAll(this._root._oncreate);
		callAll(this._root._aftercreate);
		this._root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign({}, oldState, newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);
		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
		this._fragment.p(changed, this._state);
		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
	}

	function _mount(target, anchor) {
		this._fragment.m(target, anchor);
	}

	function _unmount() {
		this._fragment.u();
	}

	function differs(a, b) {
		return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function noop() {}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return LogalyzerApp;
}(QueryEditor, Nymph, LogEntry));